esphome:
  name: epever
  friendly_name: epever
esp8266:
  board: d1_mini
# Enable logging
logger:
  baud_rate: 0

uart:
  id: mod_bus
  tx_pin: TX
  rx_pin: RX
  baud_rate: 115200
  stop_bits: 1

modbus:
  flow_control_pin: D1
  id: modbus1
  send_wait_time: 200ms

modbus_controller:
  - id: epever
    ## the Modbus device addr
    address: 0x1
    modbus_id: modbus1
    setup_priority: -10
    command_throttle: 200ms
    update_interval: 30s

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Charging Mode"
    id: chg_mode
    address: 0x3201
    register_type: read
    raw_encode: HEXBYTES
    
    lambda: |-
      uint16_t orig_var, local_var = modbus_controller::word_from_hex_str(x, 0);
      //ESP_LOGI("mprowe", "The value of local_var is: %d", local_var);
      orig_var = local_var;
      local_var = local_var >> 2;
      //ESP_LOGI("mprowe", "local_var right shift 2 is: %d", local_var);
      local_var = local_var & 0x03;
      //ESP_LOGI("mprowe", "local_var & 0x03 is: %d", local_var);
      switch (local_var) {
        case 0: return std::string("Not Charging");
        case 1: return std::string("Float Charging");
        case 2: return std::string("Boost Charging");
        case 3: return std::string("Equalizing");
        default: return std::string("Unknown");
      }
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Battery Status"
    id: battery_status
    address: 0x3200
    register_type: read
    raw_encode: HEXBYTES
    
    lambda: |-
      uint16_t local_var = modbus_controller::word_from_hex_str(x, 0);
      //ESP_LOGI("mprowe", "The value of local_var is: %d", local_var);
      local_var = local_var >> 2;
      //ESP_LOGI("mprowe", "local_var right shift 2 is: %d", local_var);
      local_var = local_var & 0x03;
      //ESP_LOGI("mprowe", "local_var & 0x03 is: %d", local_var);
      switch (local_var) {
        case 1: return std::string("Overvolt");
        case 0: return std::string("Normal");
        case 2: return std::string("Under Volt");
        case 3: return std::string("Low Volt Disconnect");
        case 4: return std::string("Fault");        
        default: return std::string("Unknown");
      }

switch:
  #- platform: modbus_controller
  #  modbus_controller_id: epever
  #  id: reset_to_fabric_default
  #  name: "Reset to Factory Default"
  #  register_type: coil
  #  address: 0x15
  #  bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: epever
    id: manual_control_load
    register_type: coil
    address: 2
    name: "manual control the load"
    bitmask: 1

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

  - platform: modbus_controller
    modbus_controller_id: epever
    id: generated_energy_today
    name: "Generated energy today"
    address: 0x330C
    device_class: power
    unit_of_measurement: "W"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    #filters:
    #  - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_voltage
    name: "PV array input voltage"
    address: 0x3100
    device_class: voltage
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_current
    name: "PV array input current"
    address: 0x3101
    device_class: current
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_power
    name: "PV array input power"
    address: 0x3102
    device_class: power
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_voltage
    name: "Battery voltage"
    address: 0x3104
    device_class: voltage
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_current
    name: "Charging current"
    address: 0x3105
    device_class: current
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_power
    name: "Charging power"
    address: 0x3106
    device_class: power
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_voltage
    name: "Load voltage"
    address: 0x310C
    device_class: voltage
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_current
    name: "Load Current"
    address: 0x310D
    device_class: current
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_power
    name: "Load power"
    address: 0x310E
    device_class: power
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_temperature
    name: "Battery temperature"
    address: 0x3110
    device_class: temperature
    unit_of_measurement: °C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: device_temperature
    name: "Device temperature"
    address: 0x3111
    device_class: temperature
    unit_of_measurement: °C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_soc
    name: "Battery SOC"
    address: 0x311A
    device_class: battery
    unit_of_measurement: "%"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  password: "1876349ef83259523a36893c241d1ad2"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Epever Fallback Hotspot"
    password: "69fYokgtS49H"

captive_portal:

web_server:
  port: 80
